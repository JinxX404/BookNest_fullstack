# Generated by Django 5.1.2 on 2025-05-15 18:15

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('books', '0003_alter_bookauthor_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.CharField(choices=[('svd', 'Singular Value Decomposition'), ('knn', 'K-Nearest Neighbors')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('min_ratings_per_user', models.IntegerField(default=5)),
                ('n_factors', models.IntegerField(default=100, help_text='Number of factors for SVD model')),
                ('knn_k', models.IntegerField(default=40, help_text='Number of neighbors for KNN model')),
                ('rmse', models.FloatField(blank=True, null=True)),
                ('mae', models.FloatField(blank=True, null=True)),
                ('model_file', models.FileField(blank=True, null=True, upload_to='recommendation_models/')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(help_text='Predicted rating or recommendation score')),
                ('recommended_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book')),
                ('model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='recommendation.recommendationmodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_recommendation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score'],
                'unique_together': {('user', 'book')},
            },
        ),
    ]
